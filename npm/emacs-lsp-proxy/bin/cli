#!/usr/bin/env node
const childProcess = require('child_process');
const path = require('path');
const fs = require('fs');
const os = require('os');

// Platform-specific package mappings - same as install.js
const platformPackages = {
  'darwin-arm64': '@emacs-lsp-proxy/darwin-arm64',
  'darwin-x64': '@emacs-lsp-proxy/darwin-x64', 
  'linux-arm64': '@emacs-lsp-proxy/linux-arm64',
  'linux-x64': '@emacs-lsp-proxy/linux-x64',
  'win32-x64': '@emacs-lsp-proxy/win32-x64'
};

function getBinaryPath() {
  // First try local bin directory (after install.js has run)
  const platform = os.platform();
  const binaryName = platform === 'win32' ? 'emacs-lsp-proxy.exe' : 'emacs-lsp-proxy';
  const localBin = path.join(__dirname, '..', 'bin', binaryName);
  
  if (fs.existsSync(localBin)) {
    return localBin;
  }

  // Fallback: try to resolve from platform package directly  
  const platformKey = `${platform}-${os.arch()}`;
  const packageName = platformPackages[platformKey];
  
  if (!packageName) {
    throw new Error(`Unsupported platform: ${platformKey}`);
  }

  try {
    const packageDir = path.dirname(require.resolve(packageName + '/package.json'));
    const possiblePaths = [
      path.join(packageDir, binaryName),
      path.join(packageDir, 'bin', binaryName)
    ];
    
    for (const binPath of possiblePaths) {
      if (fs.existsSync(binPath)) {
        return binPath;
      }
    }
  } catch (e) {
    // Package not found
  }

  throw new Error(`Binary not found for platform: ${platformKey}`);
}

try {
  const binaryPath = getBinaryPath();
  childProcess.execFileSync(binaryPath, process.argv.slice(2), { stdio: 'inherit' });
} catch (error) {
  console.error('[emacs-lsp-proxy]', error.message);
  process.exit(1);
}