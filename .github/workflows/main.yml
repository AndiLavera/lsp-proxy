name: release
on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - build: linux-x86_64
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
            archive-name: lsp-proxy-linux-x86_64.tar.gz
          # Linux ARM64
          - build: linux-arm64
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-musl
            archive-name: lsp-proxy-linux-arm64.tar.gz
          # macOS x86_64
          - build: macos-x86_64
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            archive-name: lsp-proxy-macos-x86_64.tar.gz
          # macOS ARM64 (Apple Silicon)
          - build: macos-arm64
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
            archive-name: lsp-proxy-macos-arm64.tar.gz
          # Windows x86_64
          - build: windows-x86_64
            os: windows-latest
            rust: stable-x86_64-msvc
            target: x86_64-pc-windows-msvc
            archive-name: lsp-proxy-windows-x86_64.7z
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.build == 'linux-arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_musl=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_musl=aarch64-linux-gnu-ar" >> $GITHUB_ENV

      - name: Install musl tools (Linux x86_64)
        if: matrix.build == 'linux-x86_64'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --verbose --release --target ${{ matrix.target }}
        env:
          RUST_BACKTRACE: 1

      - name: Strip binary (linux and macos)
        shell: bash
        run: |
          if [[ "${{ matrix.build }}" == "linux-x86_64" ]]; then
            strip "target/${{ matrix.target }}/release/emacs-lsp-proxy"
          elif [[ "${{ matrix.build }}" == "linux-arm64" ]]; then
            aarch64-linux-gnu-strip "target/${{ matrix.target }}/release/emacs-lsp-proxy"
          elif [[ "${{ matrix.build }}" == "macos-x86_64" ]] || [[ "${{ matrix.build }}" == "macos-arm64" ]]; then
            strip "target/${{ matrix.target }}/release/emacs-lsp-proxy"
          fi

      - name: Build archive
        shell: bash
        run: |
          set -e
          # Define directories
          RELEASE_ARCHIVE_DIR="release-archive"
          NPM_DIR="npm"

          # Create directories
          mkdir -p "$RELEASE_ARCHIVE_DIR"
          mkdir -p "$NPM_DIR/@emacs-lsp-proxy"

          # Copy common files to release archive directory
          cp LICENSE README.org lsp-proxy.el "$RELEASE_ARCHIVE_DIR/"

          # Handle platform-specific copying and archiving
          if [[ "${{ matrix.build }}" == windows* ]]; then
            WIN_PLATFORM_DIR="$NPM_DIR/@emacs-lsp-proxy/win32-x64"
            mkdir -p "$WIN_PLATFORM_DIR"
            # Copy binary to release archive directory
            cp "target/${{ matrix.target }}/release/emacs-lsp-proxy.exe" "$RELEASE_ARCHIVE_DIR/emacs-lsp-proxy.exe"
            # Copy binary to npm package directory
            cp "target/${{ matrix.target }}/release/emacs-lsp-proxy.exe" "$WIN_PLATFORM_DIR/emacs-lsp-proxy.exe"
            # Create release archive
            7z a "$RELEASE_ARCHIVE_DIR/${{ matrix.archive-name }}" "$RELEASE_ARCHIVE_DIR/LICENSE" "$RELEASE_ARCHIVE_DIR/README.org" "$RELEASE_ARCHIVE_DIR/lsp-proxy.el" "$RELEASE_ARCHIVE_DIR/emacs-lsp-proxy.exe"
          else
            LINUX_MACOS_PLATFORM_DIR=""
            if [[ "${{ matrix.build }}" == linux-x86_64 ]]; then LINUX_MACOS_PLATFORM_DIR="$NPM_DIR/@emacs-lsp-proxy/linux-x64/bin"; fi
            if [[ "${{ matrix.build }}" == linux-arm64 ]]; then LINUX_MACOS_PLATFORM_DIR="$NPM_DIR/@emacs-lsp-proxy/linux-arm64/bin"; fi
            if [[ "${{ matrix.build }}" == macos-x86_64 ]]; then LINUX_MACOS_PLATFORM_DIR="$NPM_DIR/@emacs-lsp-proxy/darwin-x64/bin"; fi
            if [[ "${{ matrix.build }}" == macos-arm64 ]]; then LINUX_MACOS_PLATFORM_DIR="$NPM_DIR/@emacs-lsp-proxy/darwin-arm64/bin"; fi
            
            mkdir -p "$LINUX_MACOS_PLATFORM_DIR"
            # Copy binary to release archive directory
            cp "target/${{ matrix.target }}/release/emacs-lsp-proxy" "$RELEASE_ARCHIVE_DIR/emacs-lsp-proxy"
            # Copy binary to npm package directory
            cp "target/${{ matrix.target }}/release/emacs-lsp-proxy" "$LINUX_MACOS_PLATFORM_DIR/emacs-lsp-proxy"
            chmod +x "$LINUX_MACOS_PLATFORM_DIR/emacs-lsp-proxy"
            # Create release archive
            tar -czf "$RELEASE_ARCHIVE_DIR/${{ matrix.archive-name }}" -C "$RELEASE_ARCHIVE_DIR" LICENSE README.org lsp-proxy.el emacs-lsp-proxy
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.build }}
          path: |
            release-archive/${{ matrix.archive-name }}
            npm/@emacs-lsp-proxy

  publish-npm:
    name: Publish npm packages
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Extract version from tag
        id: extract_version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=$(node scripts/extract-version.js "$TAG_NAME")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION from tag: $TAG_NAME"

      - name: Update package.json versions
        run: |
          echo "Updating all package.json files to version ${{ steps.extract_version.outputs.version }}"
          node scripts/update-version.js "${{ steps.extract_version.outputs.version }}"

      - name: Commit version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add npm/*/package.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "release: update package versions to ${{ steps.extract_version.outputs.version }}"
            git push origin HEAD:main
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Reorganize npm packages
        run: |
          set -e
          # Create consolidated npm directory from artifacts
          mkdir -p consolidated-npm/@emacs-lsp-proxy
          
          # Copy platform-specific packages from different artifacts
          for build in linux-x86_64 linux-arm64 macos-x86_64 macos-arm64 windows-x86_64; do
            if [ -d "artifacts/build-artifacts-$build/npm/@emacs-lsp-proxy" ]; then
              cp -r artifacts/build-artifacts-$build/npm/@emacs-lsp-proxy/* consolidated-npm/@emacs-lsp-proxy/
            fi
          done
          
          # Copy the main package
          cp -r npm/emacs-lsp-proxy consolidated-npm/

      - name: Publish npm packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          set -e
          # Publish platform-specific packages first
          cd consolidated-npm/@emacs-lsp-proxy/linux-x64 && npm publish --access public
          cd ../linux-arm64 && npm publish --access public
          cd ../darwin-x64 && npm publish --access public
          cd ../darwin-arm64 && npm publish --access public
          cd ../win32-x64 && npm publish --access public
          # Publish main package
          cd ../../emacs-lsp-proxy && npm publish --access public

  release:
    name: Release
    needs: publish-npm
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: assets

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ./assets/build-artifacts-linux-x86_64/release-archive/lsp-proxy-linux-x86_64.tar.gz
            ./assets/build-artifacts-linux-arm64/release-archive/lsp-proxy-linux-arm64.tar.gz
            ./assets/build-artifacts-macos-x86_64/release-archive/lsp-proxy-macos-x86_64.tar.gz
            ./assets/build-artifacts-macos-arm64/release-archive/lsp-proxy-macos-arm64.tar.gz
            ./assets/build-artifacts-windows-x86_64/release-archive/lsp-proxy-windows-x86_64.7z
          body: |
            Automated release for build artifacts.
            
            ## Supported Platforms
            
            - Linux (x86_64, ARM64)
            - macOS (x86_64, ARM64/Apple Silicon)
            - Windows (x86_64)
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
